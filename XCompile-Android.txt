# Cross-compiling requires CMake 2.6 or newer. Example:
# cmake .. -DCMAKE_TOOLCHAIN_FILE=../XCompile-Android.txt -DARCH=armv7a -DTOOLCHAIN_ROOT=/tmp/ndk-arm-linux-androideabi-4.9
# Where '/tmp/ndk-arm-linux-androideabi-4.9' the standalone toolchain. If
# you already have a toolchain file setup, you may use that instead of this
# file. Make sure to set CMAKE_FIND_ROOT_PATH to where the NDK toolchain was
# installed (e.g. "$ENV{HOME}/toolchains/arm-linux-androideabi-r10c-21").

# the name of the target operating system. Set to Android to enable CMAKE_PLATFORM_NO_VERSIONED_SONAME
SET(CMAKE_SYSTEM_NAME Android) #Linux, Windows etc

# why have to run cmake twice to enable custom flags without cache?
set(CMAKE_C_FLAGS "" CACHE STRING "c flags")
set(CMAKE_CXX_FLAGS "" CACHE STRING "c++ flags")

IF(CMAKE_SYSTEM_NAME STREQUAL Android)
  IF(NOT ARCH)
    SET(ARCH armeabi-v7a)
  ENDIF()
  IF(NOT CROSS_PREFIX)
    IF(ARCH MATCHES "arm64" OR ARCH MATCHES "aarch64")
      SET(CROSS_PREFIX aarch64-linux-android)
      SET(CMAKE_ANDROID_API 21)
    ELSEIF(ARCH MATCHES "arm")
      SET(CROSS_PREFIX arm-linux-androideabi)
    ELSEIF(ARCH MATCHES "x86_64")
      SET(CROSS_PREFIX x86_64-linux-android)
    ELSEIF(ARCH MATCHES "i.86" OR ARCH MATCHES "x86")
      SET(CROSS_PREFIX i686-linux-android)
    ELSEIF(CMAKE_SYSTEM_NAME MATCHES "mips")
      SET(CROSS_PREFIX mipsel-linux-android)
    ENDIF()
  ENDIF()
  IF(ARCH MATCHES "arm.*v7.*a")
    SET(C_FLAGS "-march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16" CACHE INTERNAL "armv7a cflags")
    SET(CXX_FLAGS "-march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16" CACHE INTERNAL "armv7a cxxflags")
  ENDIF()
ENDIF()

IF(NOT CMAKE_SYSTEM_PROCESSOR)
  SET(CMAKE_SYSTEM_PROCESSOR "${ARCH}")
ENDIF()
SET(CMAKE_C_COMPILER "${CROSS_PREFIX}-gcc")
SET(CMAKE_CXX_COMPILER "${CROSS_PREFIX}-g++")
SET(CMAKE_RC_COMPILER "${CROSS_PREFIX}-windres")

# here is the target environment located. SET THIS TO THE NDK TOOLCHAIN'S INSTALL PATH
SET(CMAKE_FIND_ROOT_PATH "${TOOLCHAIN_ROOT}")

# here is where stuff gets installed to
IF(EXISTS "${TOOLCHAIN_ROOT}/sysroot/usr")
  SET(CMAKE_INSTALL_PREFIX "${TOOLCHAIN_ROOT}/sysroot/usr" CACHE STRING "Install path prefix, prepended onto install directories." FORCE)
ELSE()
  SET(CMAKE_INSTALL_PREFIX "${TOOLCHAIN_ROOT}" CACHE STRING "Install path prefix, prepended onto install directories." FORCE)
ENDIF()

# adjust the default behaviour of the FIND_XXX() commands:
# search headers and libraries in the target environment, search 
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

IF(NOT CMAKE_C_FLAGS MATCHES "${C_FLAGS}")
  set(CMAKE_C_FLAGS "${C_FLAGS} ${CMAKE_C_FLAGS}")
  set(CMAKE_CXX_FLAGS "${CXX_FLAGS} ${CMAKE_CXX_FLAGS}")
ENDIF()

# set env vars so that pkg-config will look in the appropriate directory for
# .pc files (as there seems to be no way to force using ${CROSS_PREFIX}-pkg-config)
set(ENV{PKG_CONFIG_LIBDIR} "${CMAKE_INSTALL_PREFIX}/lib/pkgconfig")
set(ENV{PKG_CONFIG_PATH} "")
